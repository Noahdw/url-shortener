// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUrlMapping = `-- name: CreateUrlMapping :execresult
INSERT INTO urls (
    original_url,
    short_code,
    expires_at,
    creator_ip
) VALUES (
    $1, $2, $3, $4
)
`

type CreateUrlMappingParams struct {
	OriginalUrl string
	ShortCode   string
	ExpiresAt   pgtype.Timestamptz
	CreatorIp   pgtype.Text
}

func (q *Queries) CreateUrlMapping(ctx context.Context, arg CreateUrlMappingParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createUrlMapping,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.ExpiresAt,
		arg.CreatorIp,
	)
}

const getOriginalUrlFromShortCode = `-- name: GetOriginalUrlFromShortCode :one
SELECT original_url FROM urls WHERE short_code = $1 LIMIT 1
`

func (q *Queries) GetOriginalUrlFromShortCode(ctx context.Context, shortCode string) (string, error) {
	row := q.db.QueryRow(ctx, getOriginalUrlFromShortCode, shortCode)
	var original_url string
	err := row.Scan(&original_url)
	return original_url, err
}

const getShortCodeFromOriginalUrl = `-- name: GetShortCodeFromOriginalUrl :one
SELECT short_code FROM urls WHERE original_url = $1 LIMIT 1
`

func (q *Queries) GetShortCodeFromOriginalUrl(ctx context.Context, originalUrl string) (string, error) {
	row := q.db.QueryRow(ctx, getShortCodeFromOriginalUrl, originalUrl)
	var short_code string
	err := row.Scan(&short_code)
	return short_code, err
}
